(ns example
  (:require [libpython-clj.require :refer [require-python]]
            [libpython-clj.python :as py]
            [clj-http.client :as http]))

;; 初始化 Python 环境
(py/initialize!)

;; 导入 Python 库
(require-python '[pdfplumber :as pdf])
(require-python '[sentence_transformers :as st])
(require-python '[chromadb :as chroma])

;; 1. 提取 PDF 文本
(defn extract-text-from-pdf [filepath]
  (with-open [pdf-file (pdf/open filepath)]
    (reduce str (map #(py/$a % extract_text) (.pages pdf-file)))))

;; 2. 文本分块（带重叠）
(defn chunk-text-with-overlap [text chunk-size overlap]
  (let [step (- chunk-size overlap)]
    (loop [chunks [] remaining text]
      (if (<= (count remaining) chunk-size)
        (conj chunks remaining)
        (recur (conj chunks (subs remaining 0 chunk-size))
               (subs remaining step))))))

;; 3. 生成 embedding
(def model (st/SentenceTransformer "paraphrase-multilingual-MiniLM-L12-v2"))
(defn generate-embeddings [text-chunks]
  (py/$a model encode text-chunks))

;; 4. 初始化 Chroma 客户端
(def client (chroma/Client))
(def collection (py/$a client :get_or_create_collection "documents"))

;; 5. 添加 embedding 到 Chroma
(defn add-embedding-to-chroma [id text embedding]
  (py/$a collection :add
         {:ids [id]
          :documents [text]
          :embeddings [embedding]}))

;; 6. 检索最相似的文本块
(defn search-similar-chroma [query-embedding k]
  (py/$a collection :query
         {:query_embeddings [query-embedding]
          :n_results k}))

;; 7. 过滤低质量文本块
(defn filter-low-quality-chunks [chunks min-length]
  (filter #(>= (count %) min-length) chunks))

;; 8. 调用 LLM 生成回答
(defn query-llm [prompt context]
  (let [response (http/post "https://api.openai.com/v1/completions"
                            {:headers {"Authorization" "Bearer YOUR_API_KEY"}
                             :content-type :json
                             :body (json/write-str {:model "gpt-3.5-turbo"
                                                   :prompt (str context "\n\n" prompt)
                                                   :max_tokens 150})})]
    (-> response :body (json/read-str :key-fn keyword) :choices first :text)))

;; 9. 生成最终回答
(defn generate-final-answer [query rag-results]
  (let [context (clojure.string/join "\n" rag-results)
        prompt (str "根据以下上下文，回答用户的问题：\n" context "\n\n用户问题：" query)]
    (query-llm prompt context)))

;; 完整 RAG + LLM 工作流
(defn rag-llm-pipeline [filepath query chunk-size overlap k min-length]
  (let [text (extract-text-from-pdf filepath)
        chunks (chunk-text-with-overlap text chunk-size overlap)
        embeddings (generate-embeddings chunks)]
    ;; 添加 embedding 到 Chroma
    (doseq [[id [text embedding]] (map-indexed vector (map vector chunks embeddings))
      (add-embedding-to-chroma (str id) text embedding))
    ;; 检索最相似的文本块
    (let [query-embedding (first (generate-embeddings [query]))
          results (search-similar-chroma query-embedding k)
          rag-results (filter-low-quality-chunks (map :document (:documents results)) min-length)]
      (generate-final-answer query rag-results))))