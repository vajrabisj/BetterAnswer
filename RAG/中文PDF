(ns example
  (:require [libpython-clj.require :refer [require-python]]
            [libpython-clj.python :as py]
            [clj-http.client :as http]))

;; 初始化 Python 环境
(py/initialize!)

;; 导入 Python 库
(require-python '[pdfplumber :as pdf])
(require-python '[jieba :as jieba])
(require-python '[sentence_transformers :as st])
(require-python '[faiss :as faiss])

;; 1. 提取中文 PDF 文本
(defn extract-text-from-pdf [filepath]
  (with-open [pdf-file (pdf/open filepath)]
    (reduce str (map #(py/$a % extract_text) (.pages pdf-file)))))

;; 2. 中文文本分块
(defn chunk-text [text chunk-size]
  (let [words (jieba/lcut text) ; 分词
        chunks (partition-all chunk-size words) ; 按词分块
        chunks (map #(clojure.string/join "" %) chunks)] ; 重新组合为字符串
    chunks))

;; 3. 生成嵌入向量
(def model (st/SentenceTransformer "paraphrase-multilingual-MiniLM-L12-v2"))
(defn generate-embeddings [text-chunks]
  (py/$a model encode text-chunks))

;; 4. 创建 FAISS 索引
(defn create-faiss-index [dimension]
  (faiss/IndexFlatL2 dimension))

;; 5. 检索最相似的文本块
(defn search-similar [index query-embedding k]
  (py/$a index search query-embedding k))

;; 6. 结合 LLM 生成回答
(defn query-llm [prompt context]
  (let [response (http/post "https://api.openai.com/v1/completions"
                            {:headers {"Authorization" "Bearer YOUR_API_KEY"}
                             :content-type :json
                             :body (json/write-str {:model "gpt-3.5-turbo"
                                                   :prompt (str context "\n\n" prompt)
                                                   :max_tokens 150})})]
    (-> response :body (json/read-str :key-fn keyword) :choices first :text)))

;; 完整 RAG 工作流
(defn rag-pipeline [pdf-filepath user-question]
  (let [text (extract-text-from-pdf pdf-filepath)
        chunks (chunk-text text 300)
        embeddings (generate-embeddings chunks)
        index (create-faiss-index (count (first embeddings)))]
    (add-embeddings-to-index index embeddings)
    (let [query-embedding (first (generate-embeddings [user-question]))
          similar-indices (search-similar index query-embedding 3)
          relevant-chunks (map #(nth chunks %) similar-indices)]
      (query-llm user-question (clojure.string/join "\n" relevant-chunks)))))